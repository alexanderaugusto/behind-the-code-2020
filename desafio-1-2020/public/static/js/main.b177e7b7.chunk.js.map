{"version":3,"sources":["components/Dropzone.js","components/Header.js","components/Result.js","components/SidePanel.js","App.js","index.js"],"names":["Dropzone","uploadContent","clear","submitHandler","useState","state","setState","notification","setNotification","file","setFile","errorNotification","kind","lowContrast","title","subtitle","onCloseButtonClick","className","FileUploaderDropContainer","accept","labelText","onAddFiles","_","f","addedFiles","size","name","addFileHandler","style","marginBottom","src","URL","createObjectURL","alt","maxHeight","maxWidth","Button","margin","onClick","Form","onSubmit","e","FormItem","disabled","type","AppHeader","apikey","setApikey","url","setUrl","classifierId","setClassifierId","pw","setPw","loading","setLoading","changeCredentialsHandler","a","fetch","method","body","JSON","stringify","password","collectionId","headers","rawResponse","ok","msg","json","response","err","spinner","Loading","description","aria-label","href","prefix","window","open","ModalWrapper","modalLabel","modalHeading","primaryButtonText","secondaryButtonText","iconDescription","renderTriggerButtonIcon","buttonTriggerClassName","textAlign","handleSubmit","TextInput","id","placeholder","value","onChange","target","Result","data","marginTop","display","map","r","key","class","width","Math","floor","score","for","SidePanel","zIndex","shouldSubmitOnEnter","buttonTriggerText","App","result","setResult","submitImageHandler","preventDefault","formData","FormData","append","sort","b","slice","notificationComponent","caption","position","bottom","right","resultComponent","Header","marginRight","paddingBottom","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b177e7b7.chunk.js","sourcesContent":["import {\n  Button,\n  FileUploaderDropContainer,\n  Form,\n  FormItem,\n  InlineNotification\n} from 'carbon-components-react';\nimport React, { useState } from 'react';\n\nconst Dropzone = ({ clear, submitHandler }) => {\n  const [state, setState] = useState('waiting');\n  const [notification, setNotification] = useState(false);\n  const [file, setFile] = useState(null);\n\n  const addFileHandler = (f) => {\n    if (f.addedFiles[0].size > 10000000) {\n      setNotification(f.addedFiles[0].name);\n    } else {\n      setNotification(false);\n      setFile(f.addedFiles[0]);\n      setState('uploaded');\n    }\n  };\n\n  let errorNotification = null;\n  if (notification) {\n    errorNotification = (\n      <InlineNotification\n        kind='error'\n        lowContrast\n        title={`O tamanho de '${notification}' é maior do que o limite`}\n        subtitle='O tamanho máximo é 10MB. Por favor selecione outro arquivo e tente novamente.'\n        onCloseButtonClick={() => setNotification(false)}\n      />\n    );\n  }\n\n  let uploadContent;\n  switch (state) {\n    case 'waiting':\n      uploadContent = (\n        <div className='bx--file__container'>\n          <strong className='bx--file--label'>Imagem para classificação</strong>\n          <p className='bx--label-description'>\n            Somente arquivos .jpg e .png. Tamanho máximo 10MB.\n          </p>\n          <FileUploaderDropContainer\n            accept={['image/jpeg', 'image/png']}\n            labelText='Arraste a imagem aqui ou clique para fazer o upload'\n            onAddFiles={(_, f) => addFileHandler(f)}\n          />\n        </div>\n      );\n      break;\n    default:\n      uploadContent = (\n        <>\n          <h3 style={{ marginBottom: '1rem' }}>Sua imagem:</h3>\n          <img\n            src={URL.createObjectURL(file)}\n            alt={file.name}\n            style={{\n              maxHeight: '256px',\n              maxWidth: '100%'\n            }}\n          />\n          <Button\n            kind='danger'\n            size='small'\n            style={{ margin: '1rem 0' }}\n            onClick={() => {\n              setState('waiting');\n              setFile(null);\n              clear();\n            }}\n          >\n            Remover\n          </Button>\n        </>\n      );\n      break;\n  }\n\n  return (\n    <Form onSubmit={(e) => submitHandler(e, file)}>\n      <FormItem>{uploadContent}</FormItem>\n      {errorNotification}\n      <Button disabled={file === null} type='submit'>\n        Analisar imagem\n      </Button>\n    </Form>\n  );\n};\n\nexport default Dropzone;\n","import GithubIcon32 from '@carbon/icons-react/lib/logo--github/32';\nimport SettingsIcon32 from '@carbon/icons-react/lib/settings/32';\nimport { Loading, ModalWrapper, TextInput } from 'carbon-components-react';\nimport {\n  Header,\n  HeaderGlobalAction,\n  HeaderGlobalBar,\n  HeaderName\n} from 'carbon-components-react/lib/components/UIShell';\nimport React, { useState } from 'react';\n\nconst AppHeader = ({ setNotification }) => {\n  const [apikey, setApikey] = useState('');\n  const [url, setUrl] = useState('');\n  const [classifierId, setClassifierId] = useState('');\n  const [pw, setPw] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const changeCredentialsHandler = async () => {\n    setLoading(true);\n    const rawResponse = await fetch('/api/credentials', {\n      method: 'POST',\n      body: JSON.stringify({\n        password: pw,\n        apikey,\n        url,\n        collectionId: classifierId\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setLoading(false);\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Error',\n        msg:\n          'Algo deu errado na comunicação com o servidor. Por favor, tente novamente.'\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Erro',\n          msg: response.msg\n        });\n      } else {\n        setNotification({\n          type: 'success',\n          title: 'Sucesso',\n          msg: response.msg\n        });\n      }\n    }\n  };\n\n  let spinner = null;\n  if (loading === true)\n    spinner = <Loading description='Trocando credenciais...' />;\n\n  return (\n    <Header aria-label={`Maratona Behind the Code 2020 Desafio 1`}>\n      <HeaderName href='/' prefix='Maratona Behind the Code 2020'>\n        Desafio 1\n      </HeaderName>\n      <HeaderGlobalBar>\n        <HeaderGlobalAction\n          aria-label='GitHub'\n          onClick={() =>\n            window.open('https://github.com/maratonadev-br/desafio-1-2020')\n          }\n        >\n          <GithubIcon32 />\n        </HeaderGlobalAction>\n        <ModalWrapper\n          modalLabel='Troca de credenciais'\n          modalHeading={\n            'Para usar um outro modelo, insira as credenciais do Watson Visual Recognition e a sua senha.'\n          }\n          primaryButtonText='Trocar'\n          secondaryButtonText='Cancelar'\n          iconDescription='Trocar credenciais'\n          renderTriggerButtonIcon={() => <SettingsIcon32 />}\n          buttonTriggerClassName='icon-button'\n          style={{ textAlign: 'left' }}\n          handleSubmit={changeCredentialsHandler}\n        >\n          <TextInput\n            id='apikey'\n            placeholder='Insira a API key aqui...'\n            labelText='Chave de API (API KEY) do serviço de Visual Recognition'\n            value={apikey}\n            onChange={(e) => setApikey(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='url'\n            placeholder='Insira a URL aqui...'\n            labelText='URL para chamada de API do serviço de Visual Recognition'\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='classifierId'\n            placeholder='Insira o Classifier ID aqui...'\n            labelText='ID do classificador (Classifier ID)'\n            value={classifierId}\n            onChange={(e) => setClassifierId(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='pw'\n            type='password'\n            placeholder='Insira a senha aqui...'\n            labelText='Senha escolhida durante o deploy'\n            value={pw}\n            onChange={(e) => setPw(e.target.value)}\n          />\n          {spinner}\n        </ModalWrapper>\n      </HeaderGlobalBar>\n    </Header>\n  );\n};\n\nexport default AppHeader;\n","import React from 'react';\n\nconst Result = ({ data }) => {\n  return (\n    <>\n      <h3 style={{ marginTop: '1rem' }}>Resultados da análise</h3>\n      <div\n        className='bx--row'\n        style={{\n          marginBottom: '1rem',\n          display: 'flex'\n        }}\n      >\n        {data.map((r) => {\n          return (\n            <div key={r.class} className='bx--col analysis-card'>\n              <h4 style={{ marginBottom: '0.5rem' }}>\n                Classe: <strong>{r.class}</strong>\n              </h4>\n              <div className='progress-total' id='progress'>\n                <div\n                  className='progress-current'\n                  style={{ width: Math.floor(r.score * 100) + '%' }}\n                />\n                <div className='progress-text'>\n                  {Math.floor(r.score * 100) + '%'}\n                </div>\n              </div>\n              <label for='progress'>Nível de confiança</label>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Result;\n","import { Loading, ModalWrapper, TextInput } from 'carbon-components-react';\nimport React, { useState } from 'react';\n\nconst SidePanel = ({ setNotification }) => {\n  const [pw, setPw] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setLoading(true);\n    const rawResponse = await fetch('/api/submit', {\n      method: 'POST',\n      body: JSON.stringify({\n        password: pw\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Erro',\n        msg:\n          'Algo deu errado na comunicação com o servidor. Por favor, tente novamente.'\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Erro',\n          msg: response.msg\n        });\n      } else {\n        setNotification({\n          type: 'success',\n          title: 'Estamos quase lá!',\n          msg: response.msg\n        });\n      }\n    }\n    setLoading(false);\n  };\n\n  let spinner = null;\n  if (loading === true) {\n    spinner = <Loading description='Enviando...' />;\n  }\n\n  return (\n    <div\n      className='bx--header-panel bx--header-panel--expanded side-panel'\n      style={{ zIndex: 2 }}\n    >\n      <h2 style={{ textAlign: 'center' }}>Desafio 1 | Cocamar</h2>\n      <br />\n      <p style={{ textAlign: 'center' }}>\n        Desenvolva um classificador de imagens para detectar pragas no plantio.\n      </p>\n      <br />\n      <ModalWrapper\n        shouldSubmitOnEnter\n        buttonTriggerText='Submeter'\n        modalHeading='Atenção: após clicar em submeter, você receberá um e-mail pedindo para confirmar sua submissão clicando em um link. Você deverá clicar no link para concluir a submissão.'\n        modalLabel='Submissão'\n        primaryButtonText='Submeter'\n        secondaryButtonText='Cancelar'\n        handleSubmit={submitHandler}\n        style={{ zIndex: 99999 }}\n      >\n        <TextInput\n          id='password'\n          type='password'\n          value={pw}\n          onChange={(e) => setPw(e.target.value)}\n          labelText='Digite a senha escolhida durante o deploy para submeter'\n          placeholder='Insira a senha aqui...'\n        />\n        {spinner}\n      </ModalWrapper>\n    </div>\n  );\n};\n\nexport default SidePanel;\n","import { Loading, ToastNotification } from 'carbon-components-react';\nimport React, { useState } from 'react';\nimport Dropzone from './components/Dropzone';\nimport Header from './components/Header';\nimport Result from './components/Result';\nimport SidePanel from './components/SidePanel';\n\nfunction App() {\n  const [notification, setNotification] = useState(null);\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const submitImageHandler = async (e, file) => {\n    e.preventDefault();\n    setLoading(true);\n    let formData = new FormData();\n    formData.append('image', file);\n    const rawResponse = await fetch('/api/analyze', {\n      method: 'POST',\n      body: formData\n    });\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Erro',\n        msg:\n          'Algo deu errado na comunicação com o servidor. Por favor, certifique-se de que sua conexão está estável e tente novamente.'\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Erro',\n          msg: response.msg\n        });\n      } else {\n        setResult(\n          response.result.sort((a, b) => b.score - a.score).slice(0, 3)\n        );\n      }\n    }\n    setLoading(false);\n  };\n\n  let notificationComponent = null;\n  if (notification) {\n    notificationComponent = (\n      <ToastNotification\n        lowContrast\n        kind={notification.type}\n        title={notification.title}\n        subtitle={notification.msg}\n        caption={null}\n        style={{\n          zIndex: 10000,\n          position: 'fixed',\n          bottom: '1rem',\n          right: '17rem'\n        }}\n        onCloseButtonClick={() => setNotification(null)}\n      />\n    );\n  }\n\n  let resultComponent = null;\n  if (result !== null) {\n    resultComponent = <Result data={result} />;\n  }\n\n  let spinner = null;\n  if (loading === true) {\n    spinner = <Loading />;\n  }\n\n  return (\n    <>\n      <Header setNotification={setNotification} />\n      <SidePanel setNotification={setNotification} />\n      <div\n        className='bx--grid'\n        style={{\n          marginTop: '5rem',\n          marginRight: '16rem',\n          paddingBottom: '1rem',\n          height: 'calc(100vh - 5rem)',\n          position: 'relative'\n        }}\n      >\n        <Dropzone\n          submitHandler={submitImageHandler}\n          clear={() => setResult(null)}\n        />\n        {resultComponent}\n        {spinner}\n        {notificationComponent}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}